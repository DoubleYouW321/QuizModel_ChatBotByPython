import telebot
from telebot import types

TOKEN = 'your_token'

bot = telebot.TeleBot(TOKEN)

quiz_questions = [
    {
        "question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
        "options": ["7", "8", "9", "10"],
        "correct": "8"
    },
    {
        "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?",
        "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"],
        "correct": "–ê–º–∞–∑–æ–Ω–∫–∞"
    },
    {
        "question": "–°—Ç–æ–ª–∏—Ü–∞ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?",
        "options": ["–°–∏–¥–Ω–µ–π", "–ú–µ–ª—å–±—É—Ä–Ω", "–ö–∞–Ω–±–µ—Ä—Ä–∞", "–ü–µ—Ä—Ç"],
        "correct": "–ö–∞–Ω–±–µ—Ä—Ä–∞"
    }
]

user_scores = {}
user_current_question = {}

def start_bot():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.polling(none_stop=True)

@bot.message_handler(commands=['start', 'restart'])
def start_quiz(message):
    chat_id = message.chat.id
    user_scores[chat_id] = 0
    user_current_question[chat_id] = 0
    bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ! üß†\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.')
    send_question(chat_id)

def send_question(chat_id):
    if chat_id not in user_current_question:
        bot.send_message(chat_id, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return
    
    question_index = user_current_question[chat_id]
    
    if question_index >= len(quiz_questions):
        score = user_scores[chat_id]
        total = len(quiz_questions)
        bot.send_message(
            chat_id,
            f'üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}',
            reply_markup=types.ReplyKeyboardRemove()
        )
        del user_current_question[chat_id]
        del user_scores[chat_id]
        return
    
    question = quiz_questions[question_index]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for option in question["options"]:
        markup.add(types.KeyboardButton(option))
    markup.add(types.KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    
    bot.send_message(
        chat_id,
        f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz_questions)}:\n{question['question']}",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.chat.id in user_current_question)
def check_answer(message):
    chat_id = message.chat.id
    question_index = user_current_question[chat_id]
    
    if message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
        score = user_scores[chat_id]
        total = len(quiz_questions)
        bot.send_message(
            chat_id,
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        del user_current_question[chat_id]
        del user_scores[chat_id]
        return
    
    
    
    question = quiz_questions[question_index]
    
    if message.text == question['correct']:
        user_scores[chat_id] += 1
        bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        correct_answer = question['correct']
        bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    user_current_question[chat_id] += 1
    send_question(chat_id)

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    bot.send_message(
        message.chat.id,
        "–Ø –≤–∏–∫—Ç–æ—Ä–∏–Ω-–±–æ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."
    )

if __name__ == "__main__":
    start_bot()
